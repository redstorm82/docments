<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>HTTP POST GET 本质区别详解 - gideal_wang的专栏 - 博客频道 - CSDN.NET</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="description" content="一 原理区别&#160;&#160;&#160; 一般在浏览器中输入网址访问资源都是通过GET方式；在FORM提交中，可以通过Method指定提交方式为GET或者POST，默认为GET提交Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETEURL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，" />
<script src="http://static.blog.csdn.net/scripts/jquery.js" type="text/javascript"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/ad.js?v=1.1"></script>
<link rel="Stylesheet" type="text/css" href="http://static.blog.csdn.net/skin/default/css/style.css?v=1.1" />
<link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="/gideal_wang/rss/list" />
<link rel="shortcut icon" href="/favicon.ico" />
<link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
</head>
<body>
<script src="http://csdnimg.cn/pubnav/js/pub_topnav_2011.js"type="text/javascript"></script>

<div id="container">
<div id="header">
    <div class="header">
        <div id="blog_title">
            <h1><a href="/gideal_wang">gideal_wang的专栏</a></h1>
            <h2></h2>
            <div class="clear"></div>
        </div>
        <div class="clear"></div>
    </div>
</div>
<div id="navigator">
    <div class="navigator_bg"></div>
    <div class="navigator">
        <ul>
            <li id="btnContents"><a href="/gideal_wang?viewmode=contents"><span><img src="http://static.blog.csdn.net/images/ico_list.gif">目录视图</span></a></li>
            <li id="btnView"><a href="/gideal_wang?viewmode=list"><span><img src="http://static.blog.csdn.net/images/ico_summary.gif">摘要视图</span></a></li>
            <li id="btnRss"><a href="/gideal_wang/rss/list"><span><img src="http://static.blog.csdn.net/images/ico_rss.gif">订阅</span></a></li>
</ul>
    </div>
</div>
<script type="text/javascript">
    var username = "gideal_wang";
    var _blogger = username;
    var blog_address = "http://blog.csdn.net/gideal_wang";
    var static_host = "http://static.blog.csdn.net";
    var currentUserName = "";
</script>

<div id="body">
<div id="main">
<div class="main">
<div class="notice"> 

<a href="http://events.csdn.net/DR2013/roadshow/index.html" target="_blank">
<font color=red>【免费】全新海外营销策论分享 
   </font></a>



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://bbs.csdn.net/topics/390422723" target="_blank"><font color=blue>CSDN社区4月技术大分享活动火爆开始
</font></a>

&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://www.csdn.net/article/2013-04-16/2814907" target="_blank"><font color=blue>专访黄钊吉：SQL Server现已经向云过渡



</font></a>

<br />





<a href="http://www.csdn.net/"target="_blank">
<font color=blue>来访问简洁大字的CSDN新首页 


 </font></a>

&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://e.weibo.com/csdnsupport
"target="_blank">
<font color=red>欢迎关注CSDN产品客服微博
 </font></a>



&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://bbs.csdn.net/topics/390429548"target="_blank">
<font color=red>CSDN论坛 第4期专家问答——基于openstac的可扩展云平台开发

 </font></a>






</div>
<div id="article_details" class="details">
    <div class="article_title">
    <span class="ico ico_type_Original"></span>
    <h3>
        <span class="link_title"><a href="/gideal_wang/article/details/4316691">
        HTTP POST GET 本质区别详解
        </a></span>
    </h3>
</div>

        
    <div class="article_manage">
    <span class="link_postdate">2009-07-02 17:03</span>
    <span class="link_view" title="阅读次数">35618人阅读</span>
    <span class="link_comments" title="评论次数"><a href="#comments">评论</a>(41)</span>
    <span class="link_collect"><a href="javascript:void(0);" onclick="javascript:collectArticle('HTTP POST GET 本质区别详解','4316691');return false;" title="收藏">收藏</a></span>
    <span class="link_report"><a href="#report"  onclick="javascript:report(4316691,2);return false;" title="举报">举报</a></span>
    
</div>
<div class="tag2box"><a href='http://blog.csdn.net/tag/details.html?tag=soap' target=_blank>soap</a><a href='http://blog.csdn.net/tag/details.html?tag=%e6%b5%8f%e8%a7%88%e5%99%a8' target=_blank>浏览器</a><a href='http://blog.csdn.net/tag/details.html?tag=encoding' target=_blank>encoding</a><a href='http://blog.csdn.net/tag/details.html?tag=url' target=_blank>url</a><a href='http://blog.csdn.net/tag/details.html?tag=mvc' target=_blank>mvc</a><a href='http://blog.csdn.net/tag/details.html?tag=idempotent' target=_blank>idempotent</a></div>


    
<div id="article_content" class="article_content">
<p><span style="color: #ff0000;"><strong>一 原理区别</strong>
</span>
</p>
<p>&nbsp;&nbsp;&nbsp; 一般在浏览器中输入网址访问资源都是通过GET方式；在FORM提交中，可以通过Method指定提交方式为GET或者POST，默认为GET提交</p>
<p>Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是<span style="color: #ff0000;"><strong>GET，POST，PUT，DELETE</strong>
</span>
</p>
<p>URL全称是资源描述符，我们可以这样认
为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的<span style="color: #ff6600;">查</span>
，<span style="color: #ff6600;">改</span>
，<span style="color: #ff6600;">增</span>
，<span style="color: #ff6600;">删</span>
4个操作。到这里，大家应该有个大概的了解了，GET一般用于<span style="color: #ff6600;">获取/查询</span>
资源信息，而POST一般用于<span style="color: #ff6600;">更新</span>
资源信息(<span style="color: #ff0000;"><strong>个人认为这是GET和POST的本质区别，也是协议设计者的本意，其它区别都是具体表现形式的差异</strong>
</span>
)。
</p>
<p>　　<span style="color: #0000ff;">根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的</span>
。</p>
<p>　　1.所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p>
<p>　　* 注意：这里安全的含义仅仅是指是非修改信息。</p>
<p>　　2.幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下<strong><span style="color: #0000ff;">幂等</span>
</strong>
这个概念：</p>
<div class="cnblogs_code"><!--   <br /><br />Code highlighting produced by Actipro CodeHighlighter (freeware)<br />http://www.CodeHighlighter.com/<br /><br />--><span style="color: #000000;">　　<strong><span style="color: #0000ff;">幂等</span>
</strong>
（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。<br />
　　<span style="background-color: #00ffff;">幂等有以下几种定义：<br />
　　对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有<span style="color: #0000ff;">abs(a)</span>
</span>
</span>
<span style="background-color: #00ffff;"><span style="color: #0000ff;">=</span>
<span style="color: #000000;"><span style="color: #0000ff;">abs(abs(a))</span>
。<br />
　　对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即<span style="color: #0000ff;">max(x,x)&nbsp;</span>
</span>
<span style="color: #0000ff;">=</span>
<span style="color: #000000;"><span style="color: #0000ff;">&nbsp;x</span>
。</span>
</span>
</div>
<p><span style="background-color: #00ffff;">看完上述解释后，应该可以理解GET幂等的含义了。</span>
</p>
<p>　　但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操
作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。</p>
<p>　　<span style="color: #0000ff;">根据HTTP规范，POST表示可能修改变服务器上的资源的请求</span>
。继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。</p>
<p>　　上面大概说了一下HTTP规范中，GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说：</p>
<p>　　1.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。</p>
<p>　　2.对资源的增，删，改，查操作，其实都可以通过GET/POST完成，不需要用到PUT和DELETE。</p>
<p>　　3.另外一个是，早期的但是Web MVC框架设计者们并<span style="color: #ff6600;">没有有意识地将URL当作抽象的资源来看待和设计</span>
。还有一个较为严重的问题是传统的Web MVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。</p>
<p>&nbsp;　　* 简单解释一下MVC：MVC本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。</p>
<p>　　以上3点典型地描述了老一套的风格（没有严格遵守HTTP规范），随着架构的发展，现在出现REST(Representational
State Transfer)，一套支持HTTP规范的新风格，这里不多说了，可以参考《RESTful Web Services》。</p>
<p><strong><span style="color: #ff0000;">二 表现形式区别</span>
</strong>
</p>
<p>&nbsp;&nbsp; 搞清了两者的原理区别，我们再来看一下他们实际应用中的区别：</p>
<p>&nbsp;&nbsp;&nbsp; 为了理解两者在传输过程中的不同，我们先看一下HTTP协议的格式：</p>
<p>&nbsp;&nbsp;&nbsp; HTTP请求：</p>
<p style="text-indent: 21pt;">&lt;request line&gt;</p>
<p style="text-indent: 21pt;">&lt;headers&gt;</p>
<p style="text-indent: 21pt;"><span style="color: red;">&lt;blank line&gt;</span>
</p>
<p style="text-indent: 21pt;">&lt;request-body&gt;]</p>
<p style="text-indent: 21pt;">在HTTP请求中，第一行必须是一个请求行（request line），用来说明请求类型、要访问的资源以及使用的HTTP版本。紧接着是一个首部（header）小节，用来说明服务器要使用的附加信息。在首部之后是一个空行，再此之后可以添加任意的其他数据[称之为主体（body）]。</p>
<p style="text-indent: 21pt;">GET与POST方法实例：<br />
                         GET <span style="color: #ff0000;">/books/?sex=man&amp;name=Professional</span>
 HTTP/1.1<br />
                        Host: www.wrox.com<br />
                        User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)<br />
                        Gecko/20050225 Firefox/1.0.1<br />
                        Connection: Keep-Alive<br />
                        <br />
                        POST / HTTP/1.1<br />
                        Host: www.wrox.com<br />
                        User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)<br />
                        Gecko/20050225 Firefox/1.0.1<br />
                        Content-Type: application/x-www-form-urlencoded<br />
                        Content-Length: 40<br />
                        Connection: Keep-Alive<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;  （----此处空一行----）<br />
                        <span style="color: #ff0000;">name=Professional%20Ajax&amp;publisher=Wiley</span>
</p>
<p style="text-indent: 21pt;">&nbsp;</p>
<p style="text-indent: 21pt;">有了以上对HTTP请求的了解和示例，我们再来看两种提交方式的区别：</p>
<p>&nbsp;&nbsp; （1）GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&amp;连接；例如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0
%E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：
%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。
</p>
<p>　　POST提交：把提交的数据放置在是HTTP包的包体中。上文示例中红色字体标明的就是实际的传输数据</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; 因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变</p>
<p>&nbsp; &nbsp; (2)传输数据的大小：首先声明：HTTP协议没有对传输的数据大小进行限制，<span style="font-family: 宋体;" lang="EN-US">HTTP协议规范也没有对URL长度进行限制。</span>
</p>
<p><span style="font-family: 宋体;" lang="EN-US">而在实际开发中存在的限制主要有：</span>
</p>
<p><span style="font-family: 宋体;" lang="EN-US">GET:特定浏览器和服务器对URL长度有限制，例如IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。</span>
</p>
<p><span style="font-family: 宋体;" lang="EN-US">因此对于GET提交时，传输数据就会受到URL长度的限制。</span>
</p>
<p><span style="font-family: 宋体;" lang="EN-US">POST:由于不是通过URL传值，理论上数据不受限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。</span>
</p>
<p><span style="font-family: 宋体;" lang="EN-US">&nbsp;(3)安全性：</span>
</p>
<p>.POST的安全性要比GET的安全性高。注意：这里所说的安全性和上面GET提到的&ldquo;安全&rdquo;不是同个概念。上面&ldquo;安全&rdquo;的含义仅仅是不作数据修改，而这
里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存，
(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site
request forgery攻击</p>
<p>（4）Http get,post,soap协议都是在http上运行的<br />
                        1）get：请求参数是作为一个key/value对的序列（查询字符串）附加到URL上的<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  查询字符串的长度受到web浏览器和web服务器的限制（如IE最多支持2048个字符），不适合传输大型数据集同时，它很不安全<br />
                        2）post：请求参数是在http标题的一个不同部分（名为entity body）传输的，这一部分用来传输表单信息，因此必须将Content-type设置为:application/x-www-form-urlencoded。post设计用来支持web窗体上的用户字段，其参数也是作为key/value对传输。<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 但是：它不支持复杂数据类型，因为post没有定义传输数据结构的语义和规则。<br />
                        3）soap：是http post的一个专用版本，遵循一种特殊的xml消息格式<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Content-type设置为: text/xml&nbsp;&nbsp; 任何数据都可以xml化</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;"><strong><span style="font-family: 宋体;" lang="EN-US">三 HTTP响应</span>
</strong>
</span>
<br />
                        1．HTTP响应格式：</p>
<p><br />
                        &lt;status line&gt;<br />
                        &lt;headers&gt;<br />
                        &lt;blank line&gt;<br />
                        [&lt;response-body&gt;]<br />
                        <br />
                        在响应中唯一真正的区别在于第一行中用状态信息代替了请求信息。状态行（status line）通过提供一个状态码来说明所请求的资源情况。 <br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <br />
&nbsp;HTTP响应实例：<br />
                        <br />
                        HTTP/1.1 200 OK<br />
                        Date: Sat, 31 Dec 2005 23:59:59 GMT<br />
                        Content-Type: text/html;charset=ISO-8859-1<br />
                        Content-Length: 122<br />
                        ＜html＞<br />
                        ＜head＞<br />
                        ＜title＞Wrox Homepage＜/title＞<br />
                        ＜/head＞<br />
                        ＜body＞<br />
                        ＜!-- body goes here --＞<br />
                        ＜/body＞<br />
                        ＜/html＞<br />
                        2．最常用的状态码有：<br />
                        <br />
                        ◆200 (OK): 找到了该资源，并且一切正常。<br />
                        ◆304 (NOT MODIFIED): 该资源在上次请求之后没有任何修改。这通常用于浏览器的缓存机制。<br />
                        ◆401 (UNAUTHORIZED): 客户端无权访问该资源。这通常会使得浏览器要求用户输入用户名和密码，以登录到服务器。<br />
                        ◆403 (FORBIDDEN): 客户端未能获得授权。这通常是在401之后输入了不正确的用户名或密码。<br />
                        ◆404 (NOT FOUND): 在指定的位置不存在所申请的资源。</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;"><span style="font-size: medium;"><strong>四 完整示例：</strong>
</span>
</span>
</p>
<p>例子：</p>
<p><br />
                        <span style="color: #ff0000;"><strong>HTTP GET</strong>
<br />
</span>
                        <br />
                        发送<br />
                        <br />
GET
/DEMOWebServices2.8/Service.asmx/CancelOrder?UserID=string&amp;PWD=string&amp;OrderConfirmation=string
HTTP/1.1<br />
                        Host: api.efxnow.com<br />
                        <br />
                        回复<br />
                        <br />
                        HTTP/1.1 200 OK<br />
                        Content-Type: text/xml; charset=utf-8<br />
                        Content-Length: length<br />
                        <br />
                        &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />
                        &lt;objPlaceOrderResponse xmlns=&quot;https://api.efxnow.com/webservices2.3&quot;&gt;<br />
                          &lt;Success&gt;boolean&lt;/Success&gt;<br />
                          &lt;ErrorDescription&gt;string&lt;/ErrorDescription&gt;<br />
                          &lt;ErrorNumber&gt;int&lt;/ErrorNumber&gt;<br />
                          &lt;CustomerOrderReference&gt;long&lt;/CustomerOrderReference&gt;<br />
                          &lt;OrderConfirmation&gt;string&lt;/OrderConfirmation&gt;<br />
                          &lt;CustomerDealRef&gt;string&lt;/CustomerDealRef&gt;<br />
                        &lt;/objPlaceOrderResponse&gt;<br />
                        <br />
                         <br />
                        <br />
                        <span style="color: #ff0000;"><strong>HTTP POST</strong>
</span>
<br />
                        <br />
                        发送<br />
                        <br />
                        POST /DEMOWebServices2.8/Service.asmx/CancelOrder HTTP/1.1<br />
                        Host: api.efxnow.com<br />
                        Content-Type: application/x-www-form-urlencoded<br />
                        Content-Length: length<br />
                        <br />
                        UserID=string&amp;PWD=string&amp;OrderConfirmation=string<br />
                        <br />
                        回复<br />
                        <br />
                        HTTP/1.1 200 OK<br />
                        Content-Type: text/xml; charset=utf-8<br />
                        Content-Length: length<br />
                        <br />
                        &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />
                        &lt;objPlaceOrderResponse xmlns=&quot;https://api.efxnow.com/webservices2.3&quot;&gt;<br />
                          &lt;Success&gt;boolean&lt;/Success&gt;<br />
                          &lt;ErrorDescription&gt;string&lt;/ErrorDescription&gt;<br />
                          &lt;ErrorNumber&gt;int&lt;/ErrorNumber&gt;<br />
                          &lt;CustomerOrderReference&gt;long&lt;/CustomerOrderReference&gt;<br />
                          &lt;OrderConfirmation&gt;string&lt;/OrderConfirmation&gt;<br />
                          &lt;CustomerDealRef&gt;string&lt;/CustomerDealRef&gt;<br />
                        &lt;/objPlaceOrderResponse&gt;<br />
                        <br />
                         <br />
                        <br />
                        <span style="color: #ff0000;"><strong>SOAP 1.2</strong>
</span>
<br />
                        <br />
                        发送<br />
                        <br />
                        POST /DEMOWebServices2.8/Service.asmx HTTP/1.1<br />
                        Host: api.efxnow.com<br />
                        Content-Type: application/soap+xml; charset=utf-8<br />
                        Content-Length: length<br />
                        <br />
                        &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />
&lt;soap12:Envelope
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;
xmlns:soap12=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;<br />
                          &lt;soap12:Body&gt;<br />
                        &nbsp;&nbsp;&nbsp;  &lt;CancelOrder xmlns=&quot;https://api.efxnow.com/webservices2.3&quot;&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;UserID&gt;string&lt;/UserID&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;PWD&gt;string&lt;/PWD&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;OrderConfirmation&gt;string&lt;/OrderConfirmation&gt;<br />
                        &nbsp;&nbsp;&nbsp;  &lt;/CancelOrder&gt;<br />
                          &lt;/soap12:Body&gt;<br />
                        &lt;/soap12:Envelope&gt;<br />
                        <br />
                        回复<br />
                        <br />
                        HTTP/1.1 200 OK<br />
                        Content-Type: application/soap+xml; charset=utf-8<br />
                        Content-Length: length<br />
                        <br />
                        &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />
&lt;soap12:Envelope
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;
xmlns:soap12=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;<br />
                          &lt;soap12:Body&gt;<br />
                        &nbsp;&nbsp;&nbsp;  &lt;CancelOrderResponse xmlns=&quot;https://api.efxnow.com/webservices2.3&quot;&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;CancelOrderResult&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;Success&gt;boolean&lt;/Success&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;ErrorDescription&gt;string&lt;/ErrorDescription&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;ErrorNumber&gt;int&lt;/ErrorNumber&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;CustomerOrderReference&gt;long&lt;/CustomerOrderReference&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;OrderConfirmation&gt;string&lt;/OrderConfirmation&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;CustomerDealRef&gt;string&lt;/CustomerDealRef&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/CancelOrderResult&gt;<br />
                        &nbsp;&nbsp;&nbsp;  &lt;/CancelOrderResponse&gt;<br />
                          &lt;/soap12:Body&gt;<br />
                        &lt;/soap12:Envelope&gt;</p>
</div>

<div class="share_buttons" id="sharePanel"></div>
<!--192.168.1.236-->
<div class="article_next_prev">
    <li class="prev_article"><span>上一篇：</span><a href="/gideal_wang/article/details/4316267">Cookie Session Cache</a></li>
    <li class="next_article"><span>下一篇：</span><a href="/gideal_wang/article/details/4338574">escape()、encodeURI()、encodeURIComponent()区别详解</a></li>
</div>


    
</div>
<div id="ad_cen">
<script type="text/javascript" >BAIDU_CLB_SLOT_ID = "117306";</script>
<script type="text/javascript" src="http://cbjs.baidu.com/js/o.js"></script>
</div>
<script type="text/javascript">
    //new Ad(4, 'ad_cen');
</script>
<div id="comment_title" class="panel_head">查看评论<a name="comments"></a></div>
<div id="comment_list"></div>
<div id="comment_bar"></div>
<div id="comment_form"></div>
<div class="announce">* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场<a name="reply"></a><a name="quote"></a></div>
<script type="text/javascript">
    var fileName = '4316691';
    var commentscount = 41;
    var islock = false
</script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/comment.js"></script>
<div id="ad_bot"></div>
<script type="text/javascript">
    new Ad(5, 'ad_bot');
</script>
<div id="report_dialog"></div>

<div id="d-top" style="display:none;">
<a id="d-top-a" href="#" title="回到顶部">
<img src="http://static.blog.csdn.net/images/top.png" alt="TOP" /></a>
</div>
<script type="text/javascript">
    $(function(){
        var d_top=$('#d-top');
        document.onscroll=function(){
            var scrTop=(document.body.scrollTop||document.documentElement.scrollTop);
            if(scrTop>500){
                d_top.show();
            }else{
                d_top.hide();
            }
        }
        $('#d-top-a').click(function(){
            scrollTo(0,0);
            this.blur();
            return false;
        });
    });
</script>

<div class="clear"></div>
</div>
</div>

<div id="side">
<div class="side">
<div id="panel_Profile" class="panel">
<ul class="panel_head"><span>个人资料</span></ul>
<ul class="panel_body profile">
<div id="blog_userface">
    <a href="http://my.csdn.net/gideal_wang" target="_blank">
    <img src="http://avatar.csdn.net/2/A/4/1_gideal_wang.jpg" title="访问我的空间" style="max-width:90%"/>
    </a>
    <br />
    <span><a href="http://my.csdn.net/gideal_wang" class="user_name" target="_blank">gideal_wang</a></span>
</div>
<div class="interact">
<a href="javascript:void(0);" class="attent" id="span_add_follow" title="[加关注]"></a>
<a href="javascript:void(0);" class="letter" onclick="loginto(1)" title="[发私信]"></a>
</div>
<div id="blog_medal">
</div>
<ul id="blog_rank">
    <li>访问：<span>103769次</span></li>
    <li>积分：<span>1332分</span></li>
    <li>排名：<span>第6846名</span></li>
</ul>
<ul id="blog_statistics">
    <li>原创：<span>40篇</span></li>
    <li>转载：<span>34篇</span></li>
    <li>译文：<span>0篇</span></li>
    <li>评论：<span>96条</span></li>
</ul>
</ul>
</div>



<div class="panel" id="panel_Search">
    <ul class="panel_head"><span>文章搜索</span></ul>
    <ul class="panel_body">
        <form id="frmSearch" action="http://so.csdn.net/search" class="form_search" target="_blank">
        <span><input id="inputSearch" type="text" class="blogsearch" title="请输入关键字" /></span>
        <input id="btnSubmit" type="submit" value="搜索" title="search in blog" />
        <input type="hidden" name="q" id="inputQ" />
        <input type="hidden" name="t" value="blog" />
        <a id="btnSearchBlog" target="_blank"></a>
        </form>
    </ul>
</div><div id="panel_Category" class="panel">
<ul class="panel_head"><span>文章分类</span></ul>
<ul class="panel_body">
<li>
<a href="http://blog.csdn.net/gideal_wang/article/category/592104">Ajax</a><span>(2)</span>
</li>
<li>
<a href="http://blog.csdn.net/gideal_wang/article/category/561906">CSS</a><span>(1)</span>
</li>
<li>
<a href="http://blog.csdn.net/gideal_wang/article/category/518998">HTML</a><span>(1)</span>
</li>
<li>
<a href="http://blog.csdn.net/gideal_wang/article/category/503436">JAVA</a><span>(26)</span>
</li>
<li>
<a href="http://blog.csdn.net/gideal_wang/article/category/505347">JavaScript</a><span>(12)</span>
</li>
<li>
<a href="http://blog.csdn.net/gideal_wang/article/category/625530">基本</a><span>(0)</span>
</li>
<li>
<a href="http://blog.csdn.net/gideal_wang/article/category/512738">数据库</a><span>(17)</span>
</li>
<li>
<a href="http://blog.csdn.net/gideal_wang/article/category/546450">算法</a><span>(2)</span>
</li>
</ul>
</div><div id="panel_Archive" class="panel">
<ul class="panel_head"><span>文章存档</span></ul>
<ul class="panel_body">
<div id="archive_list">
<!--归档统计-->
<li><a href="http://blog.csdn.net/gideal_wang/article/month/2011/01">2011年01月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2010/12">2010年12月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2010/11">2010年11月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2010/06">2010年06月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2010/05">2010年05月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2010/03">2010年03月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2010/01">2010年01月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2009/12">2009年12月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2009/11">2009年11月</a><span>(7)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2009/09">2009年09月</a><span>(6)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2009/08">2009年08月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2009/07">2009年07月</a><span>(8)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2009/06">2009年06月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2009/05">2009年05月</a><span>(9)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2009/04">2009年04月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2009/03">2009年03月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2009/02">2009年02月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2009/01">2009年01月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2008/12">2008年12月</a><span>(6)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2008/09">2008年09月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gideal_wang/article/month/2008/08">2008年08月</a><span>(1)</span></li>
</div>
</ul>
</div>
<div id="hotarticls" class="panel">
<ul class="panel_head"><span>阅读排行</span></ul>
<ul class="panel_body itemlist">
<li>
<a href="/gideal_wang/article/details/4316691" title="HTTP POST GET 本质区别详解">HTTP POST GET 本质区别详解</a><span>(35618)</span>
</li>
<li>
<a href="/gideal_wang/article/details/3931085" title="JavaScript 获取系统时间 计算时间差">JavaScript 获取系统时间 计算时间差</a><span>(5955)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4214117" title="JAVA读取配置文件路径">JAVA读取配置文件路径</a><span>(5387)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4147241" title="用pl/sql developer导出表结构和数据">用pl/sql developer导出表结构和数据</a><span>(4288)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4404108" title="showModalDialog()子窗口刷新父窗口">showModalDialog()子窗口刷新父窗口</a><span>(4044)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4316159" title="JAVA判断中文字符">JAVA判断中文字符</a><span>(3840)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4201368" title="JAVA 测试程序代码运行时间">JAVA 测试程序代码运行时间</a><span>(3688)</span>
</li>
<li>
<a href="/gideal_wang/article/details/3949338" title=".htm和.html的区别">.htm和.html的区别</a><span>(2819)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4905193" title="32位与64位（软件与硬件）">32位与64位（软件与硬件）</a><span>(2762)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4913965" title="父类引用指向子类对象">父类引用指向子类对象</a><span>(2097)</span>
</li>
</ul>
</div>
<div id="hotarticls2" class="panel">
<ul class="panel_head"><span>评论排行</span></ul>
<ul class="panel_body itemlist">
<li>
<a href="/gideal_wang/article/details/4316691" title="HTTP POST GET 本质区别详解">HTTP POST GET 本质区别详解</a><span>(41)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4404108" title="showModalDialog()子窗口刷新父窗口">showModalDialog()子窗口刷新父窗口</a><span>(6)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4913965" title="父类引用指向子类对象">父类引用指向子类对象</a><span>(6)</span>
</li>
<li>
<a href="/gideal_wang/article/details/3647837" title="JAVA中一维数组和二维数组的定义">JAVA中一维数组和二维数组的定义</a><span>(5)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4201368" title="JAVA 测试程序代码运行时间">JAVA 测试程序代码运行时间</a><span>(4)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4147241" title="用pl/sql developer导出表结构和数据">用pl/sql developer导出表结构和数据</a><span>(4)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4905193" title="32位与64位（软件与硬件）">32位与64位（软件与硬件）</a><span>(4)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4338574" title="escape()、encodeURI()、encodeURIComponent()区别详解">escape()、encodeURI()、encodeURIComponent()区别详解</a><span>(3)</span>
</li>
<li>
<a href="/gideal_wang/article/details/4917581" title="Class文件格式解析">Class文件格式解析</a><span>(2)</span>
</li>
<li>
<a href="/gideal_wang/article/details/3649621" title="线程安全与线程不安全">线程安全与线程不安全</a><span>(2)</span>
</li>
</ul>
</div>
<div id="homepageArticles" class="panel">
<ul class="panel_head"><span>推荐文章</span></ul>
<ul class="panel_body" id="ad_commend"></ul>
</div>
<script type="text/javascript">
 new Ad(12, 'ad_commend');
</script><div id="newcomments" class="panel">
<ul class="panel_head"><span>最新评论</span></ul>
<ul class="panel_body itemlist">
    <li>
    <a href="/gideal_wang/article/details/4316691#comments">HTTP POST GET 本质区别详解</a>
    <p style="margin:0px;"><a href="/sunzheng_123" class="user_name">sunzheng_123</a>:
好文章，赞一下。
    </p>
    </li>
    <li>
    <a href="/gideal_wang/article/details/4204453#comments">Javascript 动态添加删除表格行</a>
    <p style="margin:0px;"><a href="/f363045174" class="user_name">f363045174</a>:
博主的文章都很好啊！
    </p>
    </li>
    <li>
    <a href="/gideal_wang/article/details/4913965#comments">父类引用指向子类对象</a>
    <p style="margin:0px;"><a href="/AHUSTU1737683317" class="user_name">AHUSTU1737683317</a>:
@wlyszbq:so boring
    </p>
    </li>
    <li>
    <a href="/gideal_wang/article/details/4913965#comments">父类引用指向子类对象</a>
    <p style="margin:0px;"><a href="/wxm1993" class="user_name">wxm1993</a>:
写的横好，非常详细！
    </p>
    </li>
    <li>
    <a href="/gideal_wang/article/details/4316691#comments">HTTP POST GET 本质区别详解</a>
    <p style="margin:0px;"><a href="/huiminchen" class="user_name">huiminchen</a>:
好文章，谢谢楼主！
    </p>
    </li>
    <li>
    <a href="/gideal_wang/article/details/4316691#comments">HTTP POST GET 本质区别详解</a>
    <p style="margin:0px;"><a href="/jszj" class="user_name">jszj</a>:
@jszj:post的数据我写成“userlog=12345”，还是无法在缓冲区中看到，不知道是怎么...
    </p>
    </li>
    <li>
    <a href="/gideal_wang/article/details/4316691#comments">HTTP POST GET 本质区别详解</a>
    <p style="margin:0px;"><a href="/jszj" class="user_name">jszj</a>:
在弄thttpd的服务器，现在要支持post方式(以post为基础进行的功能扩展)进行数据传输，弄了...
    </p>
    </li>
    <li>
    <a href="/gideal_wang/article/details/4316691#comments">HTTP POST GET 本质区别详解</a>
    <p style="margin:0px;"><a href="/xiongyoudou1" class="user_name">xiongyoudou1</a>:
楼主，请求指教：在用post方式上传数据时，上传文字与上传图片的方式是一样的吗？我做的是IOS新浪微...
    </p>
    </li>
    <li>
    <a href="/gideal_wang/article/details/4316691#comments">HTTP POST GET 本质区别详解</a>
    <p style="margin:0px;"><a href="/zmg333" class="user_name">zmg333</a>:
好文章，讲的和透彻！
    </p>
    </li>
    <li>
    <a href="/gideal_wang/article/details/4316691#comments">HTTP POST GET 本质区别详解</a>
    <p style="margin:0px;"><a href="/congzhou09" class="user_name">congzhou09</a>:
“如果是中文/其他字符，则直接把字符串用BASE64加密，得出如： %E4%BD%A0%E5%A5%...
    </p>
    </li>
</ul>
</div>
<div id="custom_column_988543" class="panel">
<ul class="panel_head"><span>javascript</span></ul>
<ul class="panel_body">
<ul><li><a href="http://www.fzs8.net/Java/JavaScript/" target=_blank>javascript用法</a></li></ul>
</ul>
</div></div>
<div class="clear"></div>
</div>

<div class="clear"></div>
</div>

<script type="text/javascript" src="http://static.blog.csdn.net/scripts/newblog.min.js?v=1.1"></script>
<script type="text/javascript" src="http://medal.blog.csdn.net/showblogmedal.ashx?blogid=370694"></script>

<script type="text/javascript">
document.write('<script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/publib_footer.js?' + Math.floor(new Date()/120000).toString(36) + '="></'+'script>');
</script>

<script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>
<script type="text/javascript">document.write("<img src=http://counter.csdn.net/pv.aspx?id=24 border=0 width=0 height=0>");</script>
<script type="text/javascript" src="http://www.csdn.net/ui/scripts/Csdn/counter.js?v=1"></script>


<script type="text/javascript" src="http://ad.csdn.net/scripts/ad-blog.js"></script>

</div>
</body>
</html>